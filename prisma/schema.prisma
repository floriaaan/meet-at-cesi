// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum VerificationTokenType {
  EMAIL_VERIFICATION
}

model VerificationToken {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  identifier VerificationTokenType
  token      String                @unique @default(cuid())
  expires    DateTime              @default(dbgenerated("CURRENT_TIMESTAMP + INTERVAL '1 hour'"))
}

model Preference {
  campus    String
  promotion String

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  createdEvents  Event[]   @relation("event_creation")
  participations Event[]   @relation("event_participation")

  preferences Preference?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  sendedInvitations   Invitation[] @relation("event_invitation_sended")
  receivedInvitations Invitation[] @relation("event_invitation_received")
  feedbacks           Feedback[]
  comments            Comment[]

  blamedFor Report[] @relation("report_user_blamed")
  reported  Report[] @relation("report_user_sender")

  verificationTokens VerificationToken[]
}

model Event {
  id             String   @id @default(cuid())
  title          String
  location       String
  coordinates    Float[]
  date           DateTime
  audience       String
  audienceCampus String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creator   User     @relation("event_creation", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String

  participants User[]       @relation("event_participation")
  invitations  Invitation[]
  comments     Comment[]
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt

  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId String?
  event    Event   @relation(fields: [eventId], references: [id])
  eventId  String

  parent   Comment?  @relation("comment_parent", fields: [parentId], references: [id])
  parentId String?
  children Comment[] @relation("comment_parent")

  isDeleted Boolean @default(false)
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REFUSED
}

model Invitation {
  id         String           @id @default(cuid())
  eventId    String
  receiverId String
  senderId   String
  createdAt  DateTime         @default(now())
  status     InvitationStatus @default(PENDING)

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  receiver User @relation("event_invitation_received", fields: [receiverId], references: [id], onDelete: Cascade, map: "receiverId")
  sender   User @relation("event_invitation_sended", fields: [senderId], references: [id], onDelete: Cascade, map: "senderId")

  @@unique([eventId, receiverId, senderId])
}

model Feedback {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  text      String
  page      String

  history String[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ReportType {
  SPAM
  INAPPROPRIATE
  OTHER
}

enum ReportObject {
  EVENT
  COMMENT
  USER
  NULL
}

model Report {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  content   String
  page      String

  type     ReportType
  object   ReportObject
  objectId String?

  blamedUserId String
  blamedUser   User   @relation("report_user_blamed", fields: [blamedUserId], references: [id])

  senderId String
  sender   User   @relation("report_user_sender", fields: [senderId], references: [id])
}
